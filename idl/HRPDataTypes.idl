#include "ExtendedDataTypes.idl"

module OpenHRP
{
  struct RobotState
  {
    string name;
    RTC::Pose3D basePose;
    sequence<double> q;
  };

  typedef sequence<RobotState> RobotStateSeq;
  struct SceneState
  {
    double time;
    RobotStateSeq states;
  };

  struct TimedLongSeqSeq
  {
    RTC::Time tm;
    sequence<sequence<long> > data;
  };


  // Additional data type definisions disscussed in [openrtm-users 02915] mailing list.
  // These should be commited in ExtendedDataTypes.idl

  //------------------------------------------------------------
  // data types
  //------------------------------------------------------------

  /*!
   * @struct Quaternion
   * @brief Orientation x, y, z, and w.
   */
  struct Quaternion
  {
    double x;
    double y;
    double z;
    double w;
  };

  /*!
   * @struct Wrench
   * @brief Force[N] and Torque[Nm].
   */
  struct Wrench
  {
    RTC::Vector3D force;
    RTC::Vector3D torque;
  };

  /*!
   * @struct SpatialVelocity
   * @brief AngularVelocity[rad/s] and velocity[m/s].
   */
  struct SpatialVelocity
  {
    RTC::AngularVelocity3D omega;
    RTC::Velocity3D vel;
  };

  struct LandingPosition
  {
    double x;
    double y;
    double z;
    double nx;
    double ny;
    double nz;
    long l_r; // 0: right. 1: left.
  };

  struct SteppableRegion
  {
    sequence<sequence<double> > region;
    long l_r; // 0: right. 1: left.
  };

  struct CogState
  {
    double x;
    double y;
    double z;
    double vx;
    double vy;
    double vz;
    long l_r; // 0: right. 1: left.
  };

  //------------------------------------------------------------
  // Timed data types
  //------------------------------------------------------------

  struct TimedQuaternion
  {
    RTC::Time tm;
    Quaternion data;
  };

  struct TimedWrench
  {
    RTC::Time tm;
    Wrench data;
  };

  struct TimedSpatialVelocity
  {
    RTC::Time tm;
    SpatialVelocity data;
  };

  struct TimedLandingPosition
  {
    RTC::Time tm;
    LandingPosition data;
  };

  struct TimedSteppableRegion
  {
    RTC::Time tm;
    SteppableRegion data;
  };

  struct TimedCogState
  {
    RTC::Time tm;
    CogState data;
  };
};
